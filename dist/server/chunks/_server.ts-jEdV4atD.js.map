{"version":3,"file":"_server.ts-jEdV4atD.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/auth/_slug_/_server.ts.js"],"sourcesContent":["import { e as error, j as json } from \"../../../../chunks/index.js\";\nimport { D as Database } from \"../../../../chunks/db.js\";\nimport bcrypt from \"bcrypt\";\nimport { A as AuthService } from \"../../../../chunks/auth-service.js\";\nconst POST = async (event) => {\n  const { cookies } = event;\n  const { slug } = event.params;\n  try {\n    switch (slug) {\n      case \"logout\":\n        await AuthService.logOut(cookies).then((res) => {\n        }).catch((e) => {\n          return json({ message: \"Logout Not Successful\" });\n        });\n      case \"login\":\n        const body_login = await event.request.json();\n        if (!body_login.email || !body_login.password) {\n          error(400, \"Please provide an email address and password to authenticate\");\n        }\n        const userLogin = await Database.findUser(body_login.email);\n        if (userLogin?.email === body_login.email && await bcrypt.compare(body_login.password, userLogin.password)) {\n          event.locals.user = userLogin;\n          await AuthService.logIn(userLogin.id, cookies);\n          return json({ message: \"Login Successful\", user: userLogin });\n        } else {\n          error(401, \"Invalid\temail/password combination\");\n        }\n      case \"register\":\n        const body = await event.request.json();\n        if (!body.email || !body.name || !body.password) {\n          error(400, \"Please supply all required: email, password, name\");\n        }\n        const user = await Database.findUser(body.email);\n        if (user) {\n          error(404, \"Email has exist\");\n        } else {\n          await Database.registerNewUser(body);\n          break;\n        }\n      default:\n        error(404, \"Invalid Endpoint\");\n    }\n  } catch (err) {\n    error(503, \"Could not communicate with database\");\n  }\n  return json({ message: \"\" });\n};\nexport {\n  POST\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAIK,MAAC,IAAI,GAAG,OAAO,KAAK,KAAK;AAC9B,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;AAC5B,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;AAChC,EAAE,IAAI;AACN,IAAI,QAAQ,IAAI;AAChB,MAAM,KAAK,QAAQ;AACnB,QAAQ,MAAM,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK;AACxD,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK;AACxB,UAAU,OAAO,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;AAC5D,SAAS,CAAC,CAAC;AACX,MAAM,KAAK,OAAO;AAClB,QAAQ,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;AACtD,QAAQ,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;AACvD,UAAU,KAAK,CAAC,GAAG,EAAE,8DAA8D,CAAC,CAAC;AACrF,SAAS;AACT,QAAQ,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACpE,QAAQ,IAAI,SAAS,EAAE,KAAK,KAAK,UAAU,CAAC,KAAK,IAAI,MAAM,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,EAAE;AACpH,UAAU,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;AACxC,UAAU,MAAM,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;AACzD,UAAU,OAAO,IAAI,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;AACxE,SAAS,MAAM;AACf,UAAU,KAAK,CAAC,GAAG,EAAE,oCAAoC,CAAC,CAAC;AAC3D,SAAS;AACT,MAAM,KAAK,UAAU;AACrB,QAAQ,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;AAChD,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACzD,UAAU,KAAK,CAAC,GAAG,EAAE,mDAAmD,CAAC,CAAC;AAC1E,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzD,QAAQ,IAAI,IAAI,EAAE;AAClB,UAAU,KAAK,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AACxC,SAAS,MAAM;AACf,UAAU,MAAM,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC/C,UAAU,MAAM;AAChB,SAAS;AACT,MAAM;AACN,QAAQ,KAAK,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;AACvC,KAAK;AACL,GAAG,CAAC,OAAO,GAAG,EAAE;AAChB,IAAI,KAAK,CAAC,GAAG,EAAE,qCAAqC,CAAC,CAAC;AACtD,GAAG;AACH,EAAE,OAAO,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;AAC/B;;;;"}